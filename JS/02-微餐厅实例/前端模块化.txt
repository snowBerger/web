
http://www.cnblogs.com/dolphinX/p/4381855.html

1. AMD 异步模块定义（Asynchronous Module Definition）

   requireJS主要解决两个问题：

   a.多个js文件可能有依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器
   b.js加载的时候浏览器会停止页面渲染，加载文件越多，页面失去响应时间越长

// 定义模块 myModule.js
define(['dependency'], function(){
    var name = 'Byron';
    function printName(){
        console.log(name);
    }

    return {
        printName: printName
    };
});

// 加载模块
require(['myModule'], function (my){　
 my.printName();
});


语法
requireJS定义了一个函数 define，它是全局变量，用来定义模块

define(id?, dependencies?, factory);
id：可选参数，用来定义模块的标识，如果没有提供该参数，脚本文件名（去掉拓展名）
dependencies：是一个当前模块依赖的模块名称数组
factory：工厂方法，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值
在页面上使用require函数加载模块

require([dependencies], function(){});
require()函数接受两个参数

a.第一个参数是一个数组，表示所依赖的模块
b.第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块
require()函数在加载依赖的函数的时候是异步加载的，这样浏览器不会失去响应，它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。

2. CMD 通用模块定义 （Common Module Definition）

define
define(id?, deps?, factory)
因为CMD推崇

  a.一个文件一个模块，所以经常就用文件名作为模块id
  b.CMD推崇依赖就近，所以一般不在define的参数中写依赖，在factory中写

factory有三个参数

function(require, exports, module)

require
require 是 factory 函数的第一个参数

require(id)
require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口

exports
exports 是一个对象，用来向外提供模块接口

module
module 是一个对象，上面存储了与当前模块相关联的一些属性和方法

demo
// 定义模块  myModule.js
define(function(require, exports, module) {
  var $ = require('jquery.js')
  $('div').addClass('active');
});

// 加载模块
seajs.use(['myModule.js'], function(my){

});

3. AMD与CMD的区别

  a.AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块
  b.CMD推崇就近依赖，只有在用到某个模块的时候再去require

